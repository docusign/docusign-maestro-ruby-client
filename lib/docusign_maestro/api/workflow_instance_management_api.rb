=begin
#Maestro API

#Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise

OpenAPI spec version: 1.0.0
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_Maestro


  class WorkflowInstanceManagementApi
    attr_accessor :api_client

    def initialize(api_client = WorkflowInstanceManagementApi.default)
      @api_client = api_client
    end

    # Cancels a running workflow instance.
    # Cancels a running workflow instance.
    # @param account_id Account ID
    # @param instance_id DS Workflow Instance Id (dacId)
    # @return [CancelResponse]
    def cancel_workflow_instance(account_id, instance_id)
      data, _status_code, _headers = cancel_workflow_instance_with_http_info(account_id, instance_id)
      return data
    end

    # Cancels a running workflow instance.
    # Cancels a running workflow instance.
    # @param account_id Account ID
    # @param instance_id DS Workflow Instance Id (dacId)
    # @return [Array<(CancelResponse, Fixnum, Hash)>] CancelResponse data, response status code and response headers
    def cancel_workflow_instance_with_http_info(account_id, instance_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WorkflowInstanceManagementApi.cancel_workflow_instance ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling WorkflowInstanceManagementApi.cancel_workflow_instance" if account_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling WorkflowInstanceManagementApi.cancel_workflow_instance" if instance_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/management/instances/{instanceId}/cancel".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CancelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowInstanceManagementApi#cancel_workflow_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List of Step Histories
    # Returns a list of step history for a workflow instance
    # @param account_id Account ID
    # @param instance_id DS Workflow Instance Id (dacId)
    # @return [Array<WorkflowStepHistory>]
    def get_workflow_history(account_id, instance_id)
      data, _status_code, _headers = get_workflow_history_with_http_info(account_id, instance_id)
      return data
    end

    # Get List of Step Histories
    # Returns a list of step history for a workflow instance
    # @param account_id Account ID
    # @param instance_id DS Workflow Instance Id (dacId)
    # @return [Array<(Array<WorkflowStepHistory>, Fixnum, Hash)>] Array<WorkflowStepHistory> data, response status code and response headers
    def get_workflow_history_with_http_info(account_id, instance_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WorkflowInstanceManagementApi.get_workflow_history ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling WorkflowInstanceManagementApi.get_workflow_history" if account_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling WorkflowInstanceManagementApi.get_workflow_history" if instance_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/management/instances/{instanceId}/history".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WorkflowStepHistory>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowInstanceManagementApi#get_workflow_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Workflow Instance Details
    # Returns the details for a specific instance for a deployed workflow definition.
    # @param account_id Account ID
    # @param workflow_definition_id Workflow Definition ID
    # @param instance_id DS Workflow Instance Id (dacId)
    # @return [WorkflowInstance]
    def get_workflow_instance(account_id, workflow_definition_id, instance_id)
      data, _status_code, _headers = get_workflow_instance_with_http_info(account_id, workflow_definition_id, instance_id)
      return data
    end

    # Get Workflow Instance Details
    # Returns the details for a specific instance for a deployed workflow definition.
    # @param account_id Account ID
    # @param workflow_definition_id Workflow Definition ID
    # @param instance_id DS Workflow Instance Id (dacId)
    # @return [Array<(WorkflowInstance, Fixnum, Hash)>] WorkflowInstance data, response status code and response headers
    def get_workflow_instance_with_http_info(account_id, workflow_definition_id, instance_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WorkflowInstanceManagementApi.get_workflow_instance ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling WorkflowInstanceManagementApi.get_workflow_instance" if account_id.nil?
      # verify the required parameter 'workflow_definition_id' is set
      fail ArgumentError, "Missing the required parameter 'workflow_definition_id' when calling WorkflowInstanceManagementApi.get_workflow_instance" if workflow_definition_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling WorkflowInstanceManagementApi.get_workflow_instance" if instance_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances/{instanceId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'workflowDefinitionId' + '}', workflow_definition_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkflowInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowInstanceManagementApi#get_workflow_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List of Workflow Instances
    # Returns the list of instances for a deployed workflow definition.
    # @param account_id Account ID
    # @param workflow_definition_id Workflow Definition ID
    # @return [Array<WorkflowInstance>]
    def get_workflow_instances(account_id, workflow_definition_id)
      data, _status_code, _headers = get_workflow_instances_with_http_info(account_id, workflow_definition_id)
      return data
    end

    # Get List of Workflow Instances
    # Returns the list of instances for a deployed workflow definition.
    # @param account_id Account ID
    # @param workflow_definition_id Workflow Definition ID
    # @return [Array<(Array<WorkflowInstance>, Fixnum, Hash)>] Array<WorkflowInstance> data, response status code and response headers
    def get_workflow_instances_with_http_info(account_id, workflow_definition_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WorkflowInstanceManagementApi.get_workflow_instances ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling WorkflowInstanceManagementApi.get_workflow_instances" if account_id.nil?
      # verify the required parameter 'workflow_definition_id' is set
      fail ArgumentError, "Missing the required parameter 'workflow_definition_id' when calling WorkflowInstanceManagementApi.get_workflow_instances" if workflow_definition_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'workflowDefinitionId' + '}', workflow_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WorkflowInstance>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowInstanceManagementApi#get_workflow_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end