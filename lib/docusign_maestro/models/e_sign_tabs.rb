=begin
#Maestro API

#Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise

OpenAPI spec version: 1.0.0
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_Maestro
  class ESignTabs
    attr_accessor :anchor_string

    attr_accessor :bold

    attr_accessor :document_id

    attr_accessor :font

    attr_accessor :font_color

    attr_accessor :font_size

    attr_accessor :height

    attr_accessor :italic

    attr_accessor :locale_policy

    attr_accessor :name

    attr_accessor :optional

    attr_accessor :page_number

    attr_accessor :recipient_id

    attr_accessor :scale_value

    attr_accessor :stamp_type

    attr_accessor :tab_id

    attr_accessor :tab_label

    attr_accessor :tab_type

    attr_accessor :template_locked

    attr_accessor :template_required

    attr_accessor :tooltip

    attr_accessor :underline

    # Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
    attr_accessor :value

    attr_accessor :width

    attr_accessor :x_position

    attr_accessor :y_position

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'anchor_string' => :'anchorString',
        :'bold' => :'bold',
        :'document_id' => :'documentId',
        :'font' => :'font',
        :'font_color' => :'fontColor',
        :'font_size' => :'fontSize',
        :'height' => :'height',
        :'italic' => :'italic',
        :'locale_policy' => :'localePolicy',
        :'name' => :'name',
        :'optional' => :'optional',
        :'page_number' => :'pageNumber',
        :'recipient_id' => :'recipientId',
        :'scale_value' => :'scaleValue',
        :'stamp_type' => :'stampType',
        :'tab_id' => :'tabId',
        :'tab_label' => :'tabLabel',
        :'tab_type' => :'tabType',
        :'template_locked' => :'templateLocked',
        :'template_required' => :'templateRequired',
        :'tooltip' => :'tooltip',
        :'underline' => :'underline',
        :'value' => :'value',
        :'width' => :'width',
        :'x_position' => :'xPosition',
        :'y_position' => :'yPosition'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'anchor_string' => :'String',
        :'bold' => :'String',
        :'document_id' => :'String',
        :'font' => :'String',
        :'font_color' => :'String',
        :'font_size' => :'String',
        :'height' => :'String',
        :'italic' => :'String',
        :'locale_policy' => :'Hash<String, Object>',
        :'name' => :'String',
        :'optional' => :'String',
        :'page_number' => :'String',
        :'recipient_id' => :'String',
        :'scale_value' => :'String',
        :'stamp_type' => :'String',
        :'tab_id' => :'String',
        :'tab_label' => :'String',
        :'tab_type' => :'String',
        :'template_locked' => :'String',
        :'template_required' => :'String',
        :'tooltip' => :'String',
        :'underline' => :'String',
        :'value' => :'Object',
        :'width' => :'String',
        :'x_position' => :'String',
        :'y_position' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'anchorString')
        self.anchor_string = attributes[:'anchorString']
      end

      if attributes.has_key?(:'bold')
        self.bold = attributes[:'bold']
      end

      if attributes.has_key?(:'documentId')
        self.document_id = attributes[:'documentId']
      end

      if attributes.has_key?(:'font')
        self.font = attributes[:'font']
      end

      if attributes.has_key?(:'fontColor')
        self.font_color = attributes[:'fontColor']
      end

      if attributes.has_key?(:'fontSize')
        self.font_size = attributes[:'fontSize']
      end

      if attributes.has_key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.has_key?(:'italic')
        self.italic = attributes[:'italic']
      end

      if attributes.has_key?(:'localePolicy')
        if (value = attributes[:'localePolicy']).is_a?(Hash)
          self.locale_policy = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'optional')
        self.optional = attributes[:'optional']
      end

      if attributes.has_key?(:'pageNumber')
        self.page_number = attributes[:'pageNumber']
      end

      if attributes.has_key?(:'recipientId')
        self.recipient_id = attributes[:'recipientId']
      end

      if attributes.has_key?(:'scaleValue')
        self.scale_value = attributes[:'scaleValue']
      end

      if attributes.has_key?(:'stampType')
        self.stamp_type = attributes[:'stampType']
      end

      if attributes.has_key?(:'tabId')
        self.tab_id = attributes[:'tabId']
      end

      if attributes.has_key?(:'tabLabel')
        self.tab_label = attributes[:'tabLabel']
      end

      if attributes.has_key?(:'tabType')
        self.tab_type = attributes[:'tabType']
      end

      if attributes.has_key?(:'templateLocked')
        self.template_locked = attributes[:'templateLocked']
      end

      if attributes.has_key?(:'templateRequired')
        self.template_required = attributes[:'templateRequired']
      end

      if attributes.has_key?(:'tooltip')
        self.tooltip = attributes[:'tooltip']
      end

      if attributes.has_key?(:'underline')
        self.underline = attributes[:'underline']
      end

      if attributes.has_key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.has_key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.has_key?(:'xPosition')
        self.x_position = attributes[:'xPosition']
      end

      if attributes.has_key?(:'yPosition')
        self.y_position = attributes[:'yPosition']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @tab_id.nil?
        invalid_properties.push('invalid value for "tab_id", tab_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @tab_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          anchor_string == o.anchor_string &&
          bold == o.bold &&
          document_id == o.document_id &&
          font == o.font &&
          font_color == o.font_color &&
          font_size == o.font_size &&
          height == o.height &&
          italic == o.italic &&
          locale_policy == o.locale_policy &&
          name == o.name &&
          optional == o.optional &&
          page_number == o.page_number &&
          recipient_id == o.recipient_id &&
          scale_value == o.scale_value &&
          stamp_type == o.stamp_type &&
          tab_id == o.tab_id &&
          tab_label == o.tab_label &&
          tab_type == o.tab_type &&
          template_locked == o.template_locked &&
          template_required == o.template_required &&
          tooltip == o.tooltip &&
          underline == o.underline &&
          value == o.value &&
          width == o.width &&
          x_position == o.x_position &&
          y_position == o.y_position
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [anchor_string, bold, document_id, font, font_color, font_size, height, italic, locale_policy, name, optional, page_number, recipient_id, scale_value, stamp_type, tab_id, tab_label, tab_type, template_locked, template_required, tooltip, underline, value, width, x_position, y_position].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_Maestro.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
